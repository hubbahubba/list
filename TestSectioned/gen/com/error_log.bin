mainact
 extends FragmentActivity implements OnClickListener, TabHost.OnTabChangeListener, ViewPager.OnPageChangeListener, ServiceConnection
 
 
 

	public static Fragment getFragment(ViewPager pager, FragmentPagerAdapter adapter, int index) {

		//if (index == -1) index = pager.getCurrentItem();

		try {
			Method method = adapter.getClass().getSuperclass().getDeclaredMethod("makeFragmentName", int.class, long.class);
			Field field = adapter.getClass().getSuperclass().getDeclaredField("mFragmentManager");
			field.setAccessible(true);
			FragmentManager fm = (FragmentManager) field.get(adapter);
			method.setAccessible(true);
			String tag = null;
			tag = (String) method.invoke(null, pager.getId(), (long) index);
			return fm.findFragmentByTag(tag);
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (NoSuchFieldException e) {
			e.printStackTrace();
		} 
		return null;
	}

	public static Fragment getCurrentFragment(ViewPager pager, FragmentPagerAdapter adapter) {
		return getFragment(pager, adapter, pager.getCurrentItem());
	}

	//**************************************************************************************
	//**************************************************************************************
	
	
	//**************************************************************************************
	//**************************************************************************************

	private TabHost mTabHost;
	private ViewPager mViewPager;
	private PagerAdapter mPagerAdapter;

	/** (non-Javadoc)
	 * @see android.support.v4.app.FragmentActivity#onSaveInstanceState(android.os.Bundle)
	 */
	protected void onSaveInstanceState(Bundle outState) {
		outState.putString("tab", mTabHost.getCurrentTabTag()); //save the tab selected
		super.onSaveInstanceState(outState);
	}

	/**
	 * Initialize ViewPager
	 */
	private void initViewPager() {
		List<Fragment> fragments = new Vector<Fragment>();
		fragments.add(Fragment.instantiate(this, ChatsActivity.class.getName()));
		fragments.add(Fragment.instantiate(this, UsersActivity.class.getName()));
		fragments.add(Fragment.instantiate(this, UserProfile.class.getName()));
		this.mPagerAdapter  = new PagerAdapter(super.getSupportFragmentManager(), fragments);
		this.mViewPager = (ViewPager)super.findViewById(R.id.viewpager);
		this.mViewPager.setAdapter(this.mPagerAdapter);
		this.mViewPager.setOnPageChangeListener(this);
	}



	/**
	 * 
	 * 
	 * Initialize the Tab Host
	 * 
	 * 
	 */
	private void initTabHost(Bundle args) {
		mTabHost = (TabHost)findViewById(android.R.id.tabhost);
		mTabHost.setup();
		//		TabInfo tabInfo = null;

		LinearLayout main = (LinearLayout)findViewById(R.layout.tabs_viewpager_layout); //activity_main);

		View view1 = createNewTab(getString(R.string.title_tab_messages), main);
		View view2 = createNewTab(getString(R.string.title_tab_contacts), main);
		View view3 = createNewTab(getString(R.string.title_tab_profile), main);

		addTab(view1, "Tab1"); //, ChatsActivity.class, args );
		addTab(view2, "Tab2"); //, ChatsActivity.class, args );
		addTab(view3, "Tab3"); //, ChatsActivity.class, args );

		mTabHost.getTabWidget().setStripEnabled(true);
		mTabHost.setOnTabChangedListener(this);
		mTabHost.setOnTouchListener(new OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				Log.e(LOG_CAT_TAG, "init TabHost OnTouch");
				return false;
			}
		});
	}

	private View createNewTab(String title, ViewGroup root) {
		View view = getLayoutInflater().inflate(R.layout.headlines, root, false);
		TextView title_textview = (TextView)view.findViewById(R.id.title);
		title_textview.setTypeface(null, Typeface.BOLD);
		title_textview.setText(title);
		view.setLayoutParams(new TableLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0.33f));
		//		 view.setPadding(2, 15, 2, 15);
		return view;
	}

	private void addTab(View tab, String title) { //, Class<?> clazz,  Bundle args) {
		TabHost.TabSpec tabSpec = mTabHost.newTabSpec(title).setIndicator(tab);
		tabSpec.setContent(new TabFactory(this));
		mTabHost.addTab(tabSpec);
	}







	/**
	 * 
	 * 
	 * TabHost Methods
	 * 
	 * 
	 */

	/** (non-Javadoc)
	 * @see android.widget.TabHost.OnTabChangeListener#onTabChanged(java.lang.String)
	 */
	public void onTabChanged(String tag) {
		//TabInfo newTab = this.mapTabInfo.get(tag);
		if (mTabHost == null || mViewPager == null) return;
		int pos = mTabHost.getCurrentTab();
		mViewPager.setCurrentItem(pos);
	}


	/**
	 * 
	 * 
	 * View Pager Methods
	 * 
	 * 
	 */

	/* (non-Javadoc)
	 * @see android.support.v4.view.ViewPager.OnPageChangeListener#onPageScrolled(int, float, int)
	 */
	@Override
	public void onPageScrolled(int position, float positionOffset,
			int positionOffsetPixels) {
		// TODO Auto-generated method stub

	}

	/* (non-Javadoc)
	 * @see android.support.v4.view.ViewPager.OnPageChangeListener#onPageSelected(int)
	 */
	@Override
	public void onPageSelected(int position) {
		// TODO Auto-generated method stub
		this.mTabHost.setCurrentTab(position);
		if (position == 0) {
			setMessagesPage();
		}
		else if (position == 1) {
			setContactProfile();
		}
		else if (position == 2) {
			setMyProfilePage();
		}
	}

	/* (non-Javadoc)
	 * @see android.support.v4.view.ViewPager.OnPageChangeListener#onPageScrollStateChanged(int)
	 */
	@Override
	public void onPageScrollStateChanged(int state) {
		// TODO Auto-generated method stub

	}
	
	
	
	
	
	
	
	
	
	
	//*********************************************************************
	//***************************Server Updates****************************
	//*********************************************************************
	private Messenger mServiceMessenger = null;
	boolean mIsBound;

	private final Messenger mMessenger = new Messenger(new IncomingMessageHandler(this));

	private void refreshChats() {
		Fragment chats_frag = getFragment(mViewPager, mPagerAdapter, 0);
		ChatsActivity chats  = (ChatsActivity)chats_frag;
		chats.refreshChats();
	}

	private void refreshUsers() {	 
		Fragment users_frag = getFragment(mViewPager, mPagerAdapter, 1);
		UsersActivity users  = (UsersActivity)users_frag;
		users.refreshUsers();
	}

	private ServiceConnection mConnection = this;

	/**
	 * Send data to the service
	 * @param intvaluetosend The data to send
	 */
	private void sendMessageToService(int intvaluetosend) {
		if (mIsBound) {
			if (mServiceMessenger != null) {
				try {
					Message msg = Message.obtain(null, MyService.MSG_SET_INT_VALUE, intvaluetosend, 0);
					msg.replyTo = mMessenger;
					mServiceMessenger.send(msg);
				} catch (RemoteException e) {
					Log.e(LOG_CAT_TAG, "ChatsActivity-sendMessageToService-" + e.toString());
				}
			}
		}
	}

	/**
	 * Bind this Activity to MyService
	 */
	private void doBindService() {
		Log.d(LOG_CAT_TAG,"ChatsActivity-doBindService");
		try {
			Intent bind_intent = new Intent(this, MyService.class);
			bindService(bind_intent, mConnection, Context.BIND_AUTO_CREATE);
			mIsBound = true;
		}
		catch(Exception e) {
			Log.e(LOG_CAT_TAG, "ChatsActivity-doBindService-" + e.toString());
			//TODO: cannot bind service
		}
	}

	/**
	 * Un-bind this Activity to MyService
	 */     
	private void doUnbindService() {
		Log.d(LOG_CAT_TAG,"ChatsActivity-doUnbindService");
		if (mIsBound) {
			// If we have received the service, and hence registered with it, then now is the time to unregister.
			if (mServiceMessenger != null) {
				try {
					Message msg = Message.obtain(null, MyService.MSG_UNREGISTER_CLIENT);
					msg.replyTo = mMessenger;
					mServiceMessenger.send(msg);
				} catch (RemoteException e) {
					Log.e(LOG_CAT_TAG, "ChatsActivity-doUnbindService-" + e.toString());
					// There is nothing special we need to do if the service has crashed.
				}
			}
			// Detach our existing connection.
			unbindService(mConnection);
			mIsBound = false;
		}
	}

	@Override
	public void onServiceConnected(ComponentName name, IBinder service) {
		Log.d(LOG_CAT_TAG,"ChatsActivity-onServiceConnected");
		mServiceMessenger = new Messenger(service);
		try {
			Message msg = Message.obtain(null, MyService.MSG_REGISTER_CLIENT);
			msg.replyTo = mMessenger;
			mServiceMessenger.send(msg);
		} 
		catch (RemoteException e) {
			Log.e(LOG_CAT_TAG, "ChatsActivity-onServiceConnected-" + e.toString());
			// In this case the service has crashed before we could even do anything with it
		} 
	}

	@Override
	public void onServiceDisconnected(ComponentName name) {
		Log.d(LOG_CAT_TAG,"ChatsActivity-onServiceDisconnected");
		// This is called when the connection with the service has been unexpectedly disconnected - process crashed.
		mServiceMessenger = null;
	}


	private static final int GROUP_UPDATE = 323;
	private static final int LINES_UPDATE = 324;
	private static final int FILE_UPDATE = 325;
	private static final int ACK_UPDATE = 326;
	private static final int USER_UPDATE = 327;
	private static final int LIVE_TYPE_UPDATE = 328;
	private static final int STOP_LIVE_TYPE_UPDATE = 329;
	private static final int SERVICE_ON = 657;
	private boolean is_service_on = false;


	/**
	 * Handle incoming messages from MyService
	 */
	static class IncomingMessageHandler extends Handler { 
		MainActivity activity;

		public IncomingMessageHandler(MainActivity activity) {
			this.activity = activity;
		}
		@Override
		public void handleMessage(Message msg) {
			// Log.d(LOGTAG,"IncomingHandler:handleMessage");
			switch (msg.what) {
			case MyService.MSG_SET_INT_VALUE:
				Log.d("Got Int Message","From Service");

				//msg.obtain();
				//				Bundle data = msg.getData();
				//				int what_update = data.getInt("value");
				//				String what_str = data.getString("str");

				int what_update = msg.arg1;
				String what_str = (String)msg.obj;

				switch (what_update) {
				case GROUP_UPDATE:
					activity.refreshChats();
					break;
				case LINES_UPDATE:
					activity.refreshChats();
					break;
					//case FILE_UPDATE:
					//	activity.getLinesRunnable();
					//	break;
					//case ACK_UPDATE:
					//activity.refreshChats(); 
					//TODO: this will only be important when chat line read is important in main ChatsActivity window
					//right now it will only waste resources
					//break;
				case USER_UPDATE:
					activity.refreshUsers();
					break;
					//case LIVE_TYPE_UPDATE:
					//what_str is the phone that's typing to us
					//break;
					//case STOP_LIVE_TYPE_UPDATE:
					//what_str is the phone that stopped typing to us
					//break;
				}

				break;
			case MyService.MSG_SET_STRING_VALUE:
				Log.d("Got String Message","From Service");
				//String str1 = msg.getData().getString("str1");
				break;
			default:
				super.handleMessage(msg);
			}
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		/**
 * The <code>PagerAdapter</code> serves the fragments when paging.
 * @author mwho
 */
public class PagerAdapter extends FragmentPagerAdapter {

	private List<Fragment> fragments;
	/**
	 * @param fm
	 * @param fragments
	 */
	public PagerAdapter(FragmentManager fm, List<Fragment> fragments) {
		super(fm);
		this.fragments = fragments;
	}
	/* (non-Javadoc)
	 * @see android.support.v4.app.FragmentPagerAdapter#getItem(int)
	 */
	@Override
	public Fragment getItem(int position) {
		return this.fragments.get(position);
	}

	/* (non-Javadoc)
	 * @see android.support.v4.view.PagerAdapter#getCount()
	 */
	@Override
	public int getCount() {
		return this.fragments.size();
	}

	@Override
	public float getPageWidth(int position) {

		//			return super.getPageWidth(position);

		if (position == 0 || position == 1)
		{
			return 0.9f;
		}
		return 1f;
	}
}





public class TabFactory implements TabContentFactory {
	/**
	 * A simple factory that returns dummy views to the Tabhost
	 * @author mwho
	 */
	private final Context mContext;

	/**
	 * @param context
	 */
	public TabFactory(Context context) {
		mContext = context;
	}

	/** (non-Javadoc)
	 * @see android.widget.TabHost.TabContentFactory#createTabContent(java.lang.String)
	 */
	public View createTabContent(String tag) {
		View v = new View(mContext);
		v.setMinimumWidth(0);
		v.setMinimumHeight(0);
		return v;
	}

}






public class FragmentAdapter extends FragmentPagerAdapter {
	//public class FragAdapter extends FragmentPagerAdapter { //FragmentTabsPager { //
	private SparseArray<Object> mPageReferenceMap = new SparseArray<Object>();//new HashMap<Integer, Object>();
	Context context;

	public FragmentAdapter(Context context, FragmentManager fm) {
		super(fm);
		this.context = context;
	}

	@Override
	public int getCount() 
	{
		return 3;
	}

	@Override
	public float getPageWidth(int position) {

		//			return super.getPageWidth(position);

		if (position == 0 || position == 1)
		{
			return 0.9f;
		}
		return 1f;
	}

	//		private String makeFragmentName(int viewId, int index) {
	//			return "android:switcher:" + viewId + ":" + index;
	//		}




	@Override
	public Fragment getItem(int position) 
	{
		Fragment frag = null;

		switch(position) {
		case 0:
			frag = new ChatsActivity(); 
			break;
		case 1:
			frag = new UsersActivity(); 
			break;
		case 2:
			frag = new UserProfile(); 
			break;
		default:
			frag = null;
			break;
		}

		mPageReferenceMap.put(Integer.valueOf(position),frag);
		return frag;
	}


	@SuppressWarnings("deprecation")
	@Override
	public void destroyItem(View container, int position, Object object) {

		super.destroyItem(container, position, object);

		mPageReferenceMap.remove(Integer.valueOf(position));
	}

	public Object getFragment(int key) {

		return mPageReferenceMap.get(key);
	}

	@Override
	public CharSequence getPageTitle(int position) {
		switch (position) {
		case 0:
			return context.getString(R.string.title_tab_messages);
		case 1:
			return context.getString(R.string.title_tab_contacts);
		case 2:
			return context.getString(R.string.title_tab_profile);
		default:
			return "";
		}
	}


}
















public class ChatsAdapter extends ArrayAdapter<Chat>{

	private static final String LOG_CAT_TAG = "My";
	private Context context;
	private int layoutResourceId;   
	private ArrayList<Chat> original = null;
	private ArrayList<Chat> items = null;
	private Locale locale;

	public ChatsAdapter(Context context, int layoutResourceId, List<Chat> data, Locale locale) {
		super(context, layoutResourceId, data);
		this.layoutResourceId = layoutResourceId;
		this.context = context;
		this.original = new ArrayList<Chat>(data);
		this.items = new ArrayList<Chat>(data);
		this.locale = locale;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		View row = convertView;
		ChatHolder holder = null;
		
		final Chat chat = items.get(position);
		if (chat != null) {
			
			if (row == null) {
				LayoutInflater inflater = (LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				row = inflater.inflate(layoutResourceId, parent, false);
				row.setLongClickable(true);
				holder = new ChatHolder();
				holder.time_or_date = (TextView)row.findViewById(R.id.time_or_date);
				holder.image = (ImageView)row.findViewById(R.id.imgIcon);
				holder.title = (TextView)row.findViewById(R.id.txtTitle);
				holder.last_row = (TextView)row.findViewById(R.id.lastRow);
			} else {
				holder = (ChatHolder) row.getTag();
			}
			
			//LayoutInflater inflater = ((Activity)context).getLayoutInflater();
			//row = inflater.inflate(layoutResourceId, parent, false);

			Timestamp timestamp = chat.getTimestamp();
			if (timestamp != null) {
				holder.time_or_date.setText(timestamp.toString());
			} else { 
				holder.time_or_date.setText("");
			}
			
			byte[] picture = chat.getPicture();
			Bitmaps.setImage(holder.image, picture);

			String name = chat.getName();
			if (name == null || name.equals("")) name = "No Name";
			
			holder.title.setText(name);

			
			String last_line = chat.getLastLine();

			holder.last_row.setText(SpannableText.getSmiledText(context, last_line));

			if (! chat.isLastLineRead()) {
				holder.title.setTypeface(null, Typeface.BOLD);
				holder.last_row.setTypeface(null, Typeface.BOLD);
			}

			holder.is_group = (chat.getGroupId() != null);
			final boolean isGroup = (chat.getGroupId() != null && chat.getGroupId().trim().length() > 0);
			holder.is_group = isGroup;
			Log.d(LOG_CAT_TAG, "Chat Added is " + (holder.is_group ? "a group" : "not a group"));
			
			row.setTag(holder);

			row.setFocusable(true);
			row.setClickable(true);
			row.setOnClickListener(new ChatClick(chat, holder));
			row.setOnCreateContextMenuListener(null); //v is row here

			//			row.setOnLongClickListener(new OnLongClickListener() {
			//
			//				@Override
			//				public boolean onLongClick(View v) {
			//					v.setOnCreateContextMenuListener(null); //v is row here
			//					return true;
			//				}
			//			});

		}
		return row;

	}

	private class ChatClick implements OnClickListener {

		Chat chat; 
		ChatHolder holder;

		public ChatClick(Chat chat, ChatHolder holder) {
			this.chat = chat;
			this.holder = holder;
		}

		@Override
		public void onClick(View v) {
			Intent chatIntent = new Intent(context, ChatDialogActivity.class);
			Log.d("ChatsAdapter-TransferParams","ChatId:" + String.valueOf(chat.getChatID()));
			Bundle bundle = new Bundle();
			bundle.putInt("chat_id", chat.getChatID());
			bundle.putString("group_id", chat.getGroupId());
			bundle.putBoolean("is_chats", true);
			boolean is_welcome = false;
			String name = chat.getName();
			if (name != null && name.equals("Welcome To My")) {
				is_welcome = true;
			}
			bundle.putBoolean("is_welcome", is_welcome);
			
			chatIntent.putExtras(bundle); //Put your id to your next Intent
			//					chat_intent.putExtra("chat_id", String.valueOf(chat.getChatID()));
			//					chat_intent.putExtra("group_id", chat.getGroupId());
			context.startActivity(chatIntent);

			if (! chat.isLastLineRead()) {
				holder.title.setTypeface(null, Typeface.NORMAL);
				holder.last_row.setTypeface(null, Typeface.NORMAL);
				chat.setIsLastLineRead(true);
			}
		}

	}

	static class ChatHolder {
		private ImageView image;
		private TextView title;
		private TextView time_or_date;
		private TextView last_row;
		private boolean is_group;
	}

	public Filter getFilter() {
		return new Filter() {
			@SuppressWarnings("unchecked")
			@Override
			protected void publishResults(CharSequence constraint, FilterResults results) {
				//data = (Chat[]) results.values;
				//ChatAdapter.this.notifyDataSetChanged();
				items = (ArrayList<Chat>)results.values;

				clear();
				int count = items.size();
				for (int i=0; i < count; i++) {
					Chat chat = items.get(i);
					add(chat);
				}
			}

			@Override
			protected FilterResults performFiltering(CharSequence constraint) {

				FilterResults results = new FilterResults();
				String searchStr = constraint.toString().toLowerCase(locale);

				if (searchStr == null || searchStr.length() == 0) {
					ArrayList<Chat> list = new ArrayList<Chat>(original);
					results.values = list;
					results.count = list.size();
				}
				else {
					final ArrayList<Chat> list = new ArrayList<Chat>(original);
					final ArrayList<Chat> nlist = new ArrayList<Chat>();
					int count = list.size();

					for (int i=0; i < count; i++) {
						final Chat chat = list.get(i);
						//                        final String name = chat.getName().toLowerCase();
						//                        final String code = chat.getCode().toLowerCase();

						if (chat.contains(searchStr, locale)) {
							nlist.add(chat);
						}
					}
					results.values = nlist;
					results.count = nlist.size();
				}
				return results;
			}
		};
	}
}
